name: Swift Package Validation

on:
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'Package.swift'
      - '*.xcframework/**'
      - '*.podspec'
      - 'SPM_INTEGRATION_GUIDE.md'
      - 'README.md'
      - 'Readme.md'
  push:
    branches: [ main, master, develop ]
    paths:
      - 'Package.swift'
      - '*.xcframework/**'
      - '*.podspec'
      - 'SPM_INTEGRATION_GUIDE.md'
      - 'README.md'
      - 'Readme.md'
  workflow_dispatch:

jobs:
  validate:
    name: Validate Swift Package
    runs-on: macos-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Validate Package.swift
      run: |
        echo "🔍 Validating Package.swift..."
        swift package dump-package > package-dump.json
        echo "✅ Package.swift is valid"
        
        # Pretty print the package description
        echo "📋 Package configuration:"
        cat package-dump.json | python3 -m json.tool
    
    - name: Resolve Dependencies
      run: |
        echo "📦 Resolving dependencies..."
        swift package resolve
        echo "✅ Dependencies resolved"
    
    - name: Build Package
      run: |
        echo "🔨 Validating Swift package (binary targets only)..."
        
        # Check if package contains buildable targets
        has_buildable=$(swift package dump-package | python3 -c "
        import sys, json
        data = json.load(sys.stdin)
        buildable_targets = [t for t in data.get('targets', []) if t.get('type') != 'binary']
        print('true' if buildable_targets else 'false')
        ")
        
        if [ "$has_buildable" = "true" ]; then
          echo "📦 Found buildable targets, running swift build..."
          swift build --verbose
          echo "✅ Build successful"
        else
          echo "📦 Package contains only binary targets (XCFrameworks)"
          echo "✅ Binary package validation - no build required"
          
          # Validate that all binary targets exist
          echo "🔍 Checking binary targets..."
          swift package dump-package | python3 -c "
          import sys, json
          data = json.load(sys.stdin)
          binary_targets = [t for t in data.get('targets', []) if t.get('type') == 'binary']
          for target in binary_targets:
              name = target.get('name')
              path = target.get('path')
              print(f'Binary target: {name} -> {path}')
          "
          echo "✅ Binary targets validated"
        fi
    
    - name: Validate XCFrameworks
      run: |
        echo "🔍 Validating XCFrameworks..."
        for framework in *.xcframework; do
          if [ -d "$framework" ]; then
            echo "Checking $framework..."
            
            # Validate Info.plist exists
            if [ ! -f "$framework/Info.plist" ]; then
              echo "❌ Missing Info.plist in $framework"
              exit 1
            fi
            
            # Check supported platforms
            echo "📱 Supported platforms for $framework:"
            plutil -p "$framework/Info.plist" | grep -A 10 "SupportedPlatforms" || echo "No platform info found"
            
            # Validate framework structure
            for arch_dir in "$framework"/*/; do
              if [ -d "$arch_dir" ]; then
                arch_name=$(basename "$arch_dir")
                echo "   - Architecture: $arch_name"
                
                # Check if framework binary exists
                framework_name=$(basename "$framework" .xcframework)
                binary_path="$arch_dir$framework_name.framework/$framework_name"
                if [ -f "$binary_path" ]; then
                  echo "     ✅ Binary found: $binary_path"
                  # Check binary architectures
                  lipo -info "$binary_path" 2>/dev/null || echo "     ℹ️  Could not read binary info"
                else
                  echo "     ❌ Binary not found: $binary_path"
                fi
              fi
            done
          fi
        done
        echo "✅ XCFramework validation complete"
    
    - name: Validate Podspecs
      run: |
        echo "🔍 Validating Podspec files..."
        for podspec in *.podspec; do
          if [ -f "$podspec" ]; then
            echo "Validating $podspec..."
            # Basic syntax check
            ruby -c "$podspec"
            echo "✅ $podspec syntax is valid"
          fi
        done
    
    - name: Check Package Manifest Consistency
      run: |
        echo "🔍 Checking Package.swift consistency..."
        
        # Extract package name and products from Package.swift
        package_name=$(swift package dump-package | python3 -c "import sys, json; print(json.load(sys.stdin)['name'])")
        echo "Package name: $package_name"
        
        # List all products
        echo "Products defined in Package.swift:"
        swift package dump-package | python3 -c "import sys, json; data = json.load(sys.stdin); [print(f'  - {product[\"name\"]} ({product[\"type\"]})') for product in data.get('products', [])]"
        
        # List all targets
        echo "Targets defined in Package.swift:"
        swift package dump-package | python3 -c "import sys, json; data = json.load(sys.stdin); [print(f'  - {target[\"name\"]} ({target.get(\"type\", \"unknown\")}) -> {target.get(\"path\", \"N/A\")}') for target in data.get('targets', [])]"
    
    - name: Validate Documentation
      run: |
        echo "📚 Validating documentation files..."
        
        # Check if SPM integration guide exists and has content
        if [ -f "SPM_INTEGRATION_GUIDE.md" ]; then
          echo "✅ SPM_INTEGRATION_GUIDE.md exists"
          word_count=$(wc -w < "SPM_INTEGRATION_GUIDE.md")
          echo "📄 SPM guide has $word_count words"
          
          # Check for required sections
          if grep -q "## Installation" "SPM_INTEGRATION_GUIDE.md"; then
            echo "✅ Installation section found"
          else
            echo "⚠️ Installation section missing"
          fi
          
          if grep -q "## Troubleshooting" "SPM_INTEGRATION_GUIDE.md"; then
            echo "✅ Troubleshooting section found"
          else
            echo "⚠️ Troubleshooting section missing"
          fi
          
          if grep -q "WebKit" "SPM_INTEGRATION_GUIDE.md"; then
            echo "✅ WebKit integration guidance found"
          else
            echo "⚠️ WebKit integration guidance missing"
          fi
        else
          echo "❌ SPM_INTEGRATION_GUIDE.md not found"
        fi
        
        # Check README files
        for readme in README.md Readme.md readme.md; do
          if [ -f "$readme" ]; then
            echo "✅ $readme exists"
            word_count=$(wc -w < "$readme")
            echo "📄 $readme has $word_count words"
          fi
        done
        
        echo "✅ Documentation validation complete"
    
    - name: Generate Validation Report
      run: |
        echo "## 📋 Swift Package Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Package.swift syntax is valid" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependencies resolved successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Binary package validation completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ XCFrameworks are properly structured" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Podspec files have valid syntax" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Documentation files validated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Type" >> $GITHUB_STEP_SUMMARY
        echo "This is a **binary package** containing XCFrameworks only." >> $GITHUB_STEP_SUMMARY
        echo "No source code compilation required." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
        
        # Add package details to summary
        swift package dump-package | python3 -c "import sys, json; data = json.load(sys.stdin); name = data.get('name', 'Unknown'); products = data.get('products', []); targets = data.get('targets', []); platforms = data.get('platforms', []); print('- **Name**: ' + name); print('- **Products**: ' + str(len(products))); print('- **Targets**: ' + str(len(targets))); print('- **Platforms**: ' + str(len(platforms)))" >> $GITHUB_STEP_SUMMARY
